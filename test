from hashlib import pbkdf2_hmac
from binascii import hexlify
from uuid import uuid4

import pymysql.cursors

connection = pymysql.connect(host='localhost',
                             user='root',
                             password='password')  # ?
try:
    connection.cursor().execute("""drop database users""")
except:
    pass
create = """create database users;
       use users;
       CREATE TABLE some_table(  `id` INT NOT NULL AUTO_INCREMENT,`login` VARCHAR(255) NULL, 
       `password` VARCHAR(255) NULL, PRIMARY KEY (`id`));"""
for element in create.split(';'):
    try:
        print(element)
        connection.cursor().execute(element)
        connection.commit()
    except ValueError as err:
        print(f"FAIL IN {str(element)}, {err}")

connection.close()

connect = pymysql.connect(host='localhost',
                          user='root',
                          password='password',  # ?
                          db='users',
                          charset='utf8mb4',
                          cursorclass=pymysql.cursors.DictCursor
                          )


class Users:

    def __init__(self, login, password: str):
        self.login = login
        self.password = create_hash(password)
        self.add_in_db()

    def add_in_db(self):
        with connect.cursor() as cursor:
            cursor.execute("""show tables""")
            print(cursor.fetchall())
            cursor.execute(f"""insert into some_table (login, password) value({self.login}, {self.password})""")
        connect.commit()


def create_hash(obj):
    hash_obj = pbkdf2_hmac(hash_name='sha256',
                           password=obj.encode(),
                           salt=uuid4().hex.encode(),
                           iterations=100000)
    return hash_obj


def check(login, password):
    obj = create_hash(password)
    with connect.cursor() as cursor:
        cursor.execute(f"""select {login} from some_table;""")
        print(cursor.fetchall())    # ?

    
    
    
    # if login in users:
    #     if users[login] == obj:
    #         print('пароль верный')
    #         return True
    #     else:
    #         print('пароль неверный')
    #         return False
    # else:
    #     print('такой пользователь не существует')
    #     return False


def select(table):
    with connect.cursor() as cursor:
        cursor.execute(f"""select * from {table};""")
        print(cursor.fetchall())


Users('test_user', 'qwerty')

user_answer = input('Если вы новый пользователь - введите +, уже зарегистрированы - нажмите enter для продолжения: ')
if user_answer == '+':
    new_login = input('Введите логин: ')
    new_password = input('Введите пароль: ')
    new_user = Users(new_login, new_password)
    print(f'В базе данных хранится строка: {hexlify(new_user.password)}')
while True:
    check_login = input('Введите логин для проверки: ')
    check_password = input('Введите пароль для проверки: ')
    checkout = check(check_login, check_password)
    if checkout:
        break

connect.close()
